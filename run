#!/usr/bin/env bash

if [ -z "$XDG_CONFIG_HOME" ]; then
    echo "no xdg config home, defaulting to: ~/.config"
    XDG_CONFIG_HOME=$HOME/.config
fi

if [ -z "$DEV_ENV" ]; then
	echo "error: env var DEV_ENV needs to be present"
	echo "please temporarily set (eg. 'DEV_ENV=\$(pwd)' ): normally set in ~/.bashrc"
	exit 1
fi

source ./.bashlib

usage() {
	echo "$DEV_ENV/run"
	echo ""
	echo "Usage:"
	echo "Install applications on the computer based on the scripts under $HOME/projects/setup/runs/"
	echo ""
	echo "Arguments:"
	echo "filter          | run only the installation for the applications that match this input filter"
	echo ""
	echo "Flags:"
	_lib_usage
	echo ""
	echo "Examples:"
	echo "./run ghostty   # runs the installation for ghostty"
}
if [[ "$usage" == "true" ]]; then
	usage
	exit 0
fi

pushd $DEV_ENV

filter=""
for ((i=0; i<argc; i++)); do
	if   [[ "-g" == "${argv[$i]}" ]] || [[ "--grep" == "${argv[$i]}" ]]; then
		i=$((i + 1))
		filter="${argv[$i]}"
	fi
done

echo "run: $filter"

scripts=$(find ./runs -maxdepth 1 -mindepth 1 -executable -type f | sort) # find every executable in the runs dir
for script in $scripts; do
	# does this script not contain this filter
	if echo "$script" | grep -qv "$filter"; then
		log "filtering $script"
		continue
	fi
	execute ./$script
done

log "done: please run the below command"
log ""
log "    cd ~/projects/setup && ./dev-env"
log ""

popd
