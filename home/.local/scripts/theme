#!/usr/bin/env bash

source $HOME/.bashlib

state="false"
reapply="false"
query=""
base="$HOME"
for ((i=0; i<argc; i++)); do
	if   [[ "-s" == "${argv[$i]}" ]] || [[ "--state" == "${argv[$i]}" ]]; then
		state="true"
	elif [[ "-q" == "${argv[$i]}" ]] || [[ "--theme" == "${argv[$i]}" ]]; then
		i=$((i + 1))
		query="${argv[$i]}"
	elif [[ "-r" == "${argv[$i]}" ]] || [[ "--reapply" == "${argv[$i]}" ]]; then
		reapply="true"
	elif [[ "-b" == "${argv[$i]}" ]] || [[ "--base" == "${argv[$i]}" ]]; then
		i=$((i + 1))
		base="${argv[$i]}"
	fi
done

if [[ "$reapply" == "true" ]]; then 
	# NOTE: re-apply the active theme, default to fall-back if none exists
	if [ -f $HOME/.local/state/theme/active ]; then
		theme=$(cat $HOME/.local/state/theme/active) 
	else
		theme="_fallback"
		echo $theme > $HOME/.local/state/theme/active 
	fi
elif [[ ! -z "$query" ]]; then 
	# NOTE: find a theme based on input query
	theme=$(ls $base/.local/themes | fzf -q $query --bind one:accept)
else 
	# NOTE: find a theme based on input query
	theme=$(ls $base/.local/themes | fzf)
fi

if [[ -z "$theme" ]]; then
	echo "error: could not determine theme to apply - none matched your input"
	exit 1
fi

line_count=$(echo "$theme" | wc -l)
if [[ "$line_count" != "1" ]]; then
	echo "error: could not determine theme to apply: $theme"
	exit 1
fi

fallback="$base/.local/themes/_fallback"
f="$base/.local/themes/$theme"
t="$HOME"

if [ ! -d $HOME/.local/state/theme ]; then
	mkdir -p $HOME/.local/state/theme 
fi
echo "$theme" > $HOME/.local/state/theme/active

# NOTE: hyprpaper
if [[ -z "$query" ]]; then
	wallpaper "${argv[@]}" --query "$theme"
else
	wallpaper "${argv[@]}"
fi

if [[ "$state" == "true" ]]; then
	exit 0 # NOTE: apply the state and stop
fi

# NOTE: waybar
if [[ -f "$f/waybar.css" ]]; then
	copy "$f/waybar.css" "$HOME/.config/waybar/theme.css"
else
	copy "$fallback/waybar.css" "$HOME/.config/waybar/theme.css"
fi

# NOTE: ghostty
if [[ -f "$f/ghostty" ]]; then
	copy "$f/ghostty" "$HOME/.config/ghostty/theme"
else
	copy "$fallback/ghostty" "$HOME/.config/ghostty/theme"
fi

# NOTE: hyprland
if [[ -f "$f/hyprland.conf" ]]; then
	copy "$f/hyprland.conf" "$HOME/.config/hypr/theme.conf"
else
	copy "$fallback/hyprland.conf" "$HOME/.config/hypr/theme.conf"
fi

# NOTE: rofi
if [[ -f "$f/rofi.rasi" ]]; then
	copy "$f/rofi.rasi" "$HOME/.local/share/rofi/themes/custom-theme.rasi"
else
	copy "$fallback/rofi.rasi" "$HOME/.local/share/rofi/themes/custom-theme.rasi"
fi

# NOTE: tmux
if [[ -f "$f/.tmux.conf" ]]; then
	copy "$f/.tmux.conf" "$HOME/.config/tmux/.tmux.theme.conf"
else
	copy "$fallback/.tmux.conf" "$HOME/.config/tmux/.tmux.theme.conf"
fi

# TODO:
# NOTE: dunst

# NOTE: neovim
if [[ -f "$f/neovim" ]]; then
	copy "$f/neovim" "$HOME/.config/nvim/theme"
else
	copy "$fallback/neovim" "$HOME/.config/nvim/theme"
fi

# NOTE: fastfetch
if [[ -f "$f/fastfetch.jsonc" ]]; then
	copy "$f/fastfetch.jsonc" "$HOME/.config/fastfetch/config.jsonc"
else
	copy "$fallback/fastfetch.jsonc" "$HOME/.config/fastfetch/config.jsonc"
fi

# TODO:
# NOTE: fzf


# NOTE: reload config
reload

function reload_nvim_theme() {
	# NOTE: <leader><leader>l is bound to lua function 'reload_theme'
	tmux list-panes -aF "#{pane_id} #{pane_current_command}" | awk '/vim|nvim/ {print $1}' | xargs -I {} tmux send-keys -t {} Space Space l
	echo "nvim: all open instances theme reloaded"
}
reload_nvim_theme

echo "Please perform the following"
echo "  - ghostty: all open instances --> Ctrl+Shift+r"
echo "  - tmux --> tmux kill-server (re-sourcing config doesn't quite work right)"

